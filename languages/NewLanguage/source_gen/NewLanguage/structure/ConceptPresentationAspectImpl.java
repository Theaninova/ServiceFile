package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Accept;
  private ConceptPresentation props_Close;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_Connect;
  private ConceptPresentation props_Cout;
  private ConceptPresentation props_Data;
  private ConceptPresentation props_Execute;
  private ConceptPresentation props_HexData;
  private ConceptPresentation props_Listen;
  private ConceptPresentation props_NetworkMock;
  private ConceptPresentation props_NetworkMockClient;
  private ConceptPresentation props_NetworkMockServer;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_ReceiveTransaction;
  private ConceptPresentation props_SendTransaction;
  private ConceptPresentation props_ServiceScript;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_Stop;
  private ConceptPresentation props_Transaction;
  private ConceptPresentation props_TransactionStatement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Accept:
        if (props_Accept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("accept");
          props_Accept = cpb.create();
        }
        return props_Accept;
      case LanguageConceptSwitch.Close:
        if (props_Close == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("close");
          props_Close = cpb.create();
        }
        return props_Close;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.Connect:
        if (props_Connect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("connect");
          props_Connect = cpb.create();
        }
        return props_Connect;
      case LanguageConceptSwitch.Cout:
        if (props_Cout == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cout");
          props_Cout = cpb.create();
        }
        return props_Cout;
      case LanguageConceptSwitch.Data:
        if (props_Data == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Data = cpb.create();
        }
        return props_Data;
      case LanguageConceptSwitch.Execute:
        if (props_Execute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("execute");
          props_Execute = cpb.create();
        }
        return props_Execute;
      case LanguageConceptSwitch.HexData:
        if (props_HexData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HEX");
          props_HexData = cpb.create();
        }
        return props_HexData;
      case LanguageConceptSwitch.Listen:
        if (props_Listen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("listen");
          props_Listen = cpb.create();
        }
        return props_Listen;
      case LanguageConceptSwitch.NetworkMock:
        if (props_NetworkMock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NetworkMock = cpb.create();
        }
        return props_NetworkMock;
      case LanguageConceptSwitch.NetworkMockClient:
        if (props_NetworkMockClient == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NetworkMockClient = cpb.create();
        }
        return props_NetworkMockClient;
      case LanguageConceptSwitch.NetworkMockServer:
        if (props_NetworkMockServer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NetworkMockServer = cpb.create();
        }
        return props_NetworkMockServer;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.ReceiveTransaction:
        if (props_ReceiveTransaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("receive");
          props_ReceiveTransaction = cpb.create();
        }
        return props_ReceiveTransaction;
      case LanguageConceptSwitch.SendTransaction:
        if (props_SendTransaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("send");
          props_SendTransaction = cpb.create();
        }
        return props_SendTransaction;
      case LanguageConceptSwitch.ServiceScript:
        if (props_ServiceScript == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ServiceScript = cpb.create();
        }
        return props_ServiceScript;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.Stop:
        if (props_Stop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("stop");
          props_Stop = cpb.create();
        }
        return props_Stop;
      case LanguageConceptSwitch.Transaction:
        if (props_Transaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Transaction = cpb.create();
        }
        return props_Transaction;
      case LanguageConceptSwitch.TransactionStatement:
        if (props_TransactionStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("with");
          props_TransactionStatement = cpb.create();
        }
        return props_TransactionStatement;
    }
    return null;
  }
}
