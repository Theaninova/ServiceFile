package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import NewLanguage.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Accept:
        return new Accept_TextGen();
      case LanguageConceptSwitch.Close:
        return new Close_TextGen();
      case LanguageConceptSwitch.Comment:
        return new Comment_TextGen();
      case LanguageConceptSwitch.Connect:
        return new Connect_TextGen();
      case LanguageConceptSwitch.Cout:
        return new Cout_TextGen();
      case LanguageConceptSwitch.Execute:
        return new Execute_TextGen();
      case LanguageConceptSwitch.HexData:
        return new HexData_TextGen();
      case LanguageConceptSwitch.Listen:
        return new Listen_TextGen();
      case LanguageConceptSwitch.NetworkMockClient:
        return new NetworkMockClient_TextGen();
      case LanguageConceptSwitch.NetworkMockServer:
        return new NetworkMockServer_TextGen();
      case LanguageConceptSwitch.Program:
        return new Program_TextGen();
      case LanguageConceptSwitch.ReceiveTransaction:
        return new ReceiveTransaction_TextGen();
      case LanguageConceptSwitch.SendTransaction:
        return new SendTransaction_TextGen();
      case LanguageConceptSwitch.ServiceScript:
        return new ServiceScript_TextGen();
      case LanguageConceptSwitch.Stop:
        return new Stop_TextGen();
      case LanguageConceptSwitch.TransactionStatement:
        return new TransactionStatement_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.ServiceScript$OV)) {
        String fname = getFileName_ServiceScript(root);
        String ext = getFileExtension_ServiceScript(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_ServiceScript(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_ServiceScript(SNode node) {
    return ".service";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ServiceScript$OV = MetaAdapterFactory.getConcept(0xbccde9bf61a047d3L, 0xac545528183d161bL, 0xb487408a09f3902L, "NewLanguage.structure.ServiceScript");
  }
}
